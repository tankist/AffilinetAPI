<?php

require_once 'Z:\home\affilinet.lan\library\ZendX\Service\Affilinet\Products.php';

/**
 * Test class for ZendX_Service_Affilinet_Products.
 * Generated by PHPUnit on 2011-08-18 at 19:55:03.
 */
class ZendX_Service_Affilinet_ProductsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ZendX_Service_Affilinet_Products
     */
    protected $object;

    protected $username = 'Users.1.2621';

    protected $password = 'v39Gryshko';

    protected $publisher = 403233;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ZendX_Service_Affilinet_Products(true, array(
                'sandboxPublisherId' => $this->publisher,
                'username' => $this->username,
                'password' => $this->password
            ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testInitOptions()
    {
        $this->assertEquals($this->username, $this->object->getUsername());
        $this->assertEquals($this->password, $this->object->getPassword());
        $this->assertEquals($this->publisher, $this->object->getSandboxPublisherId());
    }

    public function testLogon()
    {
        try {
            $this->object->logon('wrongUsername', 'wrongPassword');
            $this->fail('Exception by type ZendX_Service_Affilinet_Exception expected');
        } catch (ZendX_Service_Affilinet_Exception $e) {
            
        }

        $token = '';
        try {
            $this->object->logon($this->username, $this->password);
        } catch (ZendX_Service_Affilinet_Exception $e) {
            $this->fail('Logon failed: ' . $e->getMessage());
        }

        $this->assertTrue($this->object->isLoggedIn());
    }

    public function testGetShops()
    {
        try {
            $shops = $this->object->getShops();
        } catch (ZendX_Service_Affilinet_Exception $e) {
            $this->fail('getShops failed: ' . $e->getMessage());
        }
        $this->assertInstanceOf('ZendX_Service_Affilinet_Collection_Shops', $shops);
        $this->assertGreaterThan(0, count($shops));

        /**
         * @var ZendX_Service_Affilinet_Item_Shop $shop
         */
        $shop = $shops[0];
        $this->assertInstanceOf('ZendX_Service_Affilinet_Item_Shop', $shop);

        $this->assertInternalType('integer', $shop->getShopId());
        $this->assertGreaterThan(0, $shop->getShopId());

        $this->assertInternalType('integer', $shop->getProgramId());
        $this->assertInternalType('integer', $shop->getProducts());

        $this->assertInternalType('string', $shop->getTitle());
        
        $this->assertInstanceOf('Zend_Date', $shop->getLastUpdate());
    }

    public function testGetCategories()
    {
        try {
            $categories = $this->object->getCategories(419);
        } catch (ZendX_Service_Affilinet_Exception $e) {
            $this->fail('getCategories failed: ' . $e->getMessage());
        }
        $this->assertInstanceOf('ZendX_Service_Affilinet_Collection_Categories', $categories);
        $this->assertGreaterThan(0, count($categories));

        /**
         * @var ZendX_Service_Affilinet_Item_Category $category
         */
        $category = $categories[0];
        $this->assertInstanceOf('ZendX_Service_Affilinet_Item_Category', $category);

        $this->assertInternalType('integer', $category->getCategoryId());
        $this->assertGreaterThan(0, $category->getCategoryId());

        $this->assertInternalType('integer', $category->getProducts());
        $this->assertInternalType('integer', $category->getParentCategoryId());

        $this->assertInternalType('string', $category->getTitle());
        $this->assertInternalType('string', $category->getCategoryPath());
    }

    public function testGetCategoryPath()
    {
        try {
            $categories = $this->object->getCategoryPath(29429720, 419);
        } catch (ZendX_Service_Affilinet_Exception $e) {
            $this->fail('getCategoryPath failed: ' . $e->getMessage());
        }
        $this->assertInstanceOf('ZendX_Service_Affilinet_Collection_Categories', $categories);
        $this->assertGreaterThan(0, count($categories));

        /**
         * @var ZendX_Service_Affilinet_Item_Category $category
         */
        $category = $categories[0];
        $this->assertInstanceOf('ZendX_Service_Affilinet_Item_Category', $category);

        $this->assertInternalType('integer', $category->getCategoryId());
        $this->assertGreaterThan(0, $category->getCategoryId());

        $this->assertInternalType('integer', $category->getProducts());
        $this->assertInternalType('integer', $category->getParentCategoryId());

        $this->assertInternalType('string', $category->getTitle());
        $this->assertInternalType('string', $category->getCategoryPath());

        $this->assertEquals(0, $category->getParentCategoryId());

        for ($i = 1, $categoriesCount = count($categories); $i < $categoriesCount; $i++) {
            $parentCategory = $category;
            $category = $categories[$i];
            $this->assertEquals($parentCategory->getCategoryId(), $category->getParentCategoryId());
        }
    }
    
}
?>
